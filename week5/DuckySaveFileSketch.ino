/*
* Sketch generated by duck2spark from Marcus Mengs aka MaMe82
*
*/
#include "DigiKeyboard.h"

#define DUCK_LEN 160
const PROGMEM uint8_t duckraw [DUCK_LEN] = {
	21, 8, 0, 200, 17, 0, 18, 0, 23, 0, 8, 0, 19, 0, 4, 0, 7, 0, 55, 0, 8, 0, 27, 0, 8, 0, 0, 200, 40, 0, 0, 200, 28, 2, 18, 0, 24, 0, 44, 0, 11, 0, 4, 0, 25, 0, 8, 0, 44, 0, 5, 0, 8, 0, 8, 0, 17, 0, 44, 0, 11, 0, 4, 0, 6, 0, 14, 0, 8, 0, 7, 0, 30, 2, 0, 200, 22, 1, 0, 200, 34, 2, 24, 2, 22, 2, 8, 2, 21, 2, 19, 2, 21, 2, 18, 2, 9, 2, 12, 2, 15, 2, 8, 2, 34, 2, 49, 0, 7, 2, 8, 0, 22, 0, 14, 0, 23, 0, 18, 0, 19, 0, 49, 0, 7, 0, 24, 0, 6, 0, 14, 0, 28, 0, 9, 0, 12, 0, 15, 0, 8, 0, 55, 0, 23, 0, 27, 0, 23, 0, 0, 200, 40, 0, 0, 200, 61, 4, 0, 200
};
int i = 1; //how many times the payload should run (-1 for endless loop)
bool blink=true;

void setup()
{
	// initialize the digital pin as an output.
	pinMode(0, OUTPUT); //LED on Model B
	pinMode(1, OUTPUT); //LED on Model A
	DigiKeyboard.delay(1000); //wait 1000 milliseconds before first run, to give target time to initialize
}

void loop()
{

	//should code be runned in this loop?
	if (i != 0) {
		DigiKeyboard.sendKeyStroke(0);

		//parse raw duckencoder script
		for (int i=0; i<DUCK_LEN; i+=2)
		{
			uint8_t key = pgm_read_word_near(duckraw + i);
			uint8_t mod = pgm_read_word_near(duckraw + i+1);
			if (key == 0) //delay (a delay>255 is split into a sequence of delays)
			{
				DigiKeyboard.delay(mod);
			}
			else DigiKeyboard.sendKeyStroke(key,mod);
		}
		i--;
		DigiKeyboard.delay(5000); //wait 5000 milliseconds before next loop iteration

	}
	else if (blink)
	{
		digitalWrite(0, HIGH);   // turn the LED on (HIGH is the voltage level)
		digitalWrite(1, HIGH);
		delay(100);               // wait for a second
		digitalWrite(0, LOW);    // turn the LED off by making the voltage LOW
		digitalWrite(1, LOW);
		delay(100);               // wait for a second
	}
}
